rules:
  # Library and Dependency CVE Detection Rules
  # Detects vulnerable versions of common mobile libraries with known CVEs
  # Sources: Snyk, CVE databases, GitHub Security Advisories, NVD
  # Last Updated: 2025

  # ==================== ANDROID DEPENDENCY CVE DETECTION ====================

  # ============ OkHttp CVE Detection ============

  - id: okhttp-cve-2021-0341-hostname-verification
    patterns:
      - pattern-either:
          - pattern: |
              implementation("com.squareup.okhttp3:okhttp:$VERSION")
          - pattern: |
              implementation 'com.squareup.okhttp3:okhttp:$VERSION'
      - metavariable-comparison:
          metavariable: $VERSION
          comparison: $VERSION < "3.14.9"
      - pattern-not-inside: |
          // Test dependencies
          testImplementation(...)
      - pattern-not-inside: |
          androidTestImplementation(...)
    message: |
      Vulnerable OkHttp version detected (CVE-2021-0341).
      Hostname verification bypass vulnerability in OkHttp < 3.14.9.

      CVE: CVE-2021-0341
      SEVERITY: High (CVSS not specified)
      DESCRIPTION:
      OkHttp before 3.14.9 and 4.x before 4.9.1 has a hostname verification
      issue. Programs making direct manual calls to HostnameVerifier could be
      defeated if hostnames are not strictly ASCII.

      AFFECTED VERSIONS:
      - OkHttp 3.x before 3.14.9
      - OkHttp 4.x before 4.9.1

      EXPLOITATION:
      Man-in-the-middle attackers can bypass hostname verification by using
      non-ASCII characters in certificate subject alternative names.

      FIX: Update to safe version:
      ```gradle
      // build.gradle.kts
      dependencies {
          implementation("com.squareup.okhttp3:okhttp:4.12.0")  // Latest stable
      }
      ```

      SECURE VERSIONS:
      - OkHttp 3.14.9+ (3.x branch)
      - OkHttp 4.9.1+ (4.x branch - recommended)
      - OkHttp 4.12.0 (latest as of 2024)

      Reference: https://github.com/square/okhttp/security/advisories
      CVE: CVE-2021-0341
    severity: ERROR
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-295: Improper Certificate Validation"
      owasp-mobile-2024: "M5: Insecure Communication"
      cve: "CVE-2021-0341"
      affected_library: "com.squareup.okhttp3:okhttp"
      min_safe_version: "4.9.1"
      confidence: HIGH
      false_positive_likelihood: VERY_LOW

  - id: okhttp-cve-2023-3635-header-injection
    patterns:
      - pattern-either:
          - pattern: |
              implementation("com.squareup.okhttp3:okhttp:$VERSION")
          - pattern: |
              implementation 'com.squareup.okhttp3:okhttp:$VERSION'
      - metavariable-comparison:
          metavariable: $VERSION
          comparison: $VERSION < "4.11.0"
      - pattern-not-inside: |
          testImplementation(...)
      - pattern-not-inside: |
          androidTestImplementation(...)
    message: |
      Vulnerable OkHttp version detected (CVE-2023-3635).
      HTTP header injection vulnerability in OkHttp < 4.11.0.

      CVE: CVE-2023-3635
      SEVERITY: Medium-High
      DESCRIPTION:
      OkHttp before 4.11.0 allows header injection when parsing HTTP responses
      that contain newline characters in headers.

      ATTACK SCENARIO:
      Malicious server can inject arbitrary headers via CRLF injection,
      potentially leading to cache poisoning, session fixation, or XSS.

      FIX: Update to OkHttp 4.11.0+:
      ```gradle
      dependencies {
          implementation("com.squareup.okhttp3:okhttp:4.12.0")
      }
      ```

      Reference: https://github.com/square/okhttp/security/advisories
      CVE: CVE-2023-3635
    severity: WARNING
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers"
      owasp-mobile-2024: "M4: Insufficient Input/Output Validation"
      cve: "CVE-2023-3635"
      affected_library: "com.squareup.okhttp3:okhttp"
      min_safe_version: "4.11.0"
      confidence: HIGH
      false_positive_likelihood: VERY_LOW

  # ============ Gson CVE Detection ============

  - id: gson-cve-2022-25647-deserialization
    patterns:
      - pattern-either:
          - pattern: |
              implementation("com.google.code.gson:gson:$VERSION")
          - pattern: |
              implementation 'com.google.code.gson:gson:$VERSION'
      - metavariable-comparison:
          metavariable: $VERSION
          comparison: $VERSION < "2.8.9"
      - pattern-not-inside: |
          testImplementation(...)
      - pattern-not-inside: |
          androidTestImplementation(...)
    message: |
      Vulnerable Gson version detected (CVE-2022-25647).
      Deserialization of untrusted data vulnerability in Gson < 2.8.9.

      CVE: CVE-2022-25647
      SEVERITY: High (CVSS 7.5)
      DESCRIPTION:
      The package com.google.code.gson:gson before 2.8.9 is vulnerable to
      Deserialization of Untrusted Data via the writeReplace() method in
      internal classes, which may lead to denial of service attacks.

      ATTACK SCENARIO:
      1. Attacker provides malicious JSON input
      2. Gson deserializes using vulnerable writeReplace() method
      3. Denial of service or potential code execution

      FIX: Update to Gson 2.8.9+:
      ```gradle
      dependencies {
          implementation("com.google.code.gson:gson:2.10.1")  // Latest
      }
      ```

      SAFE VERSIONS:
      - Gson 2.8.9+ (minimum safe)
      - Gson 2.10.1 (latest as of 2024)

      ADDITIONAL PROTECTION:
      ```kotlin
      // Use type adapters for sensitive deserialization
      val gson = GsonBuilder()
          .registerTypeAdapter(SensitiveData::class.java, SafeDeserializer())
          .create()

      // Validate JSON before deserialization
      fun safeDeserialize(json: String): MyData? {
          return try {
              gson.fromJson(json, MyData::class.java)
          } catch (e: JsonSyntaxException) {
              Log.e(TAG, "Invalid JSON", e)
              null
          }
      }
      ```

      Reference: https://github.com/google/gson/security/advisories
      CVE: CVE-2022-25647
      GitHub Advisory: GHSA-4jrv-ppp4-jm57
    severity: ERROR
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-502: Deserialization of Untrusted Data"
      owasp-mobile-2024: "M4: Insufficient Input/Output Validation"
      cve: "CVE-2022-25647"
      cvss_score: 7.5
      affected_library: "com.google.code.gson:gson"
      min_safe_version: "2.8.9"
      confidence: HIGH
      false_positive_likelihood: VERY_LOW

  # ============ Retrofit CVE Detection ============

  - id: retrofit-cve-2018-1000850-xxe
    patterns:
      - pattern-either:
          - pattern: |
              implementation("com.squareup.retrofit2:retrofit:$VERSION")
          - pattern: |
              implementation 'com.squareup.retrofit2:retrofit:$VERSION'
      - metavariable-comparison:
          metavariable: $VERSION
          comparison: $VERSION < "2.5.0"
      - pattern-not-inside: |
          testImplementation(...)
    message: |
      Vulnerable Retrofit version detected (CVE-2018-1000850).
      XML External Entity (XXE) vulnerability in Retrofit < 2.5.0.

      CVE: CVE-2018-1000850
      SEVERITY: Critical (CVSS 9.8)
      DESCRIPTION:
      Square Retrofit before commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437
      contains an XML External Entity (XXE) vulnerability in JAXB that can
      result in remote file reading and SSRF.

      ATTACK SCENARIO:
      1. Attacker sends malicious XML response
      2. JAXB converter parses XXE payload
      3. Server-side file read or SSRF achieved

      FIX: Update to Retrofit 2.5.0+:
      ```gradle
      dependencies {
          implementation("com.squareup.retrofit2:retrofit:2.9.0")
          implementation("com.squareup.retrofit2:converter-gson:2.9.0")
      }
      ```

      MITIGATION:
      - Update to Retrofit 2.5.0 or later
      - Avoid using JAXB converter
      - Use Gson, Moshi, or kotlinx.serialization instead

      Reference: https://github.com/square/retrofit/security/advisories
      CVE: CVE-2018-1000850
    severity: ERROR
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-611: Improper Restriction of XML External Entity Reference"
      owasp-mobile-2024: "M4: Insufficient Input/Output Validation"
      cve: "CVE-2018-1000850"
      cvss_score: 9.8
      affected_library: "com.squareup.retrofit2:retrofit"
      min_safe_version: "2.5.0"
      confidence: HIGH
      false_positive_likelihood: VERY_LOW

  # ============ Glide CVE Detection (WebP vulnerability) ============

  - id: glide-cve-2023-4863-webp-vulnerability
    patterns:
      - pattern-either:
          - pattern: |
              implementation("com.github.bumptech.glide:glide:$VERSION")
          - pattern: |
              implementation 'com.github.bumptech.glide:glide:$VERSION'
      - metavariable-comparison:
          metavariable: $VERSION
          comparison: $VERSION < "4.16.0"
    message: |
      Glide version may be vulnerable to WebP library CVE-2023-4863.
      Critical heap buffer overflow in WebP image processing (libwebp).

      CVE: CVE-2023-4863
      SEVERITY: Critical (CVSS 8.8)
      DESCRIPTION:
      Critical heap buffer overflow in WebP library (libwebp) used by Glide.
      Affects image loading libraries that process WebP format images.

      ATTACK SCENARIO:
      1. Attacker crafts malicious WebP image
      2. App loads image via Glide
      3. Buffer overflow in libwebp
      4. Code execution or crash

      FIX: Update to Glide 4.16.0+:
      ```gradle
      dependencies {
          implementation("com.github.bumptech.glide:glide:4.16.0")
          kapt("com.github.bumptech.glide:compiler:4.16.0")
      }
      ```

      ADDITIONAL PROTECTION:
      - Validate image sources (HTTPS only from trusted domains)
      - Implement image size limits
      - Use Content-Type validation

      Reference: https://github.com/bumptech/glide/issues/5280
      CVE: CVE-2023-4863 (libwebp)
    severity: ERROR
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-787: Out-of-bounds Write"
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      cve: "CVE-2023-4863"
      cvss_score: 8.8
      affected_library: "com.github.bumptech.glide:glide"
      affected_underlying_library: "libwebp"
      min_safe_version: "4.16.0"
      confidence: MEDIUM
      false_positive_likelihood: LOW

  # ==================== iOS DEPENDENCY CVE DETECTION ====================

  # ============ CocoaPods Supply Chain Vulnerabilities (2024) ============

  - id: cocoapods-cve-2024-38366-rce
    patterns:
      - pattern-either:
          - pattern: |
              source 'https://cdn.cocoapods.org/'
          - pattern: |
              source 'https://github.com/CocoaPods/Specs.git'
      - pattern-not-inside: |
          # Pods requiring authentication
          pod '$NAME', :git => 'https://github.com/$ORG/$REPO.git', :tag => '$TAG'
    message: |
      Using public CocoaPods repository (CVE-2024-38366/38367/38368 risk).
      Critical CocoaPods supply chain vulnerabilities discovered in 2024.

      CVEs:
      - CVE-2024-38366 (CVSS 10.0): Insecure email verification workflow RCE
      - CVE-2024-38367 (CVSS 8.2): Session token theft via verification link
      - CVE-2024-38368 (CVSS 9.3): Unclaimed pod takeover

      DESCRIPTION:
      Three critical vulnerabilities in CocoaPods infrastructure allow attackers
      to hijack packages and inject malicious code into iOS/macOS applications.

      AFFECTED APPS:
      Thousands of apps including Meta (Facebook, WhatsApp), Apple (Safari),
      Microsoft (Teams), TikTok, Snapchat, Amazon, LinkedIn, Netflix, etc.

      ATTACK SCENARIO (CVE-2024-38368):
      1. Attacker identifies unclaimed/orphaned pods (from 2014 migration)
      2. Claims ownership via "Claim Your Pods" process
      3. Publishes malicious update
      4. Apps automatically download compromised dependency

      ATTACK SCENARIO (CVE-2024-38366):
      1. Attacker exploits email verification workflow
      2. Executes arbitrary code on Trunk server
      3. Manipulates/replaces packages at source

      MITIGATION STRATEGIES:
      ```ruby
      # Podfile - Use specific commit hashes/tags
      pod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git',
                       :tag => '5.8.1'

      # Pin exact versions
      pod 'SDWebImage', '5.18.7'

      # Use private pod spec repo for internal libraries
      source 'https://github.com/YourOrg/PrivateSpecs.git'

      # Subresource Integrity verification
      post_install do |installer|
        installer.pods_project.targets.each do |target|
          # Verify checksums of downloaded pods
          verify_pod_integrity(target)
        end
      end
      ```

      SECURE PRACTICES:
      1. Pin dependencies to specific versions/tags
      2. Use Git sources with commit hashes for critical dependencies
      3. Implement checksum verification in post_install hooks
      4. Audit Podfile.lock for unexpected changes
      5. Use dependency scanning tools (e.g., Snyk, Dependabot)
      6. Monitor for security advisories on used pods
      7. Consider using Swift Package Manager instead

      DETECTION:
      - Review Podfile.lock for orphaned/suspicious pods
      - Check pod ownership on CocoaPods Trunk
      - Monitor for unexpected pod updates
      - Implement CI/CD dependency verification

      Reference: https://www.evasec.io/blog/eva-discovered-supply-chain-vulnerabities-in-cocoapods
      CVEs: CVE-2024-38366, CVE-2024-38367, CVE-2024-38368
    severity: WARNING
    languages:
      - ruby
    paths:
      include:
        - "**/Podfile"
    metadata:
      category: security
      cwe: "CWE-494: Download of Code Without Integrity Check"
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      cve: "CVE-2024-38366, CVE-2024-38367, CVE-2024-38368"
      cvss_score: 10.0
      affected_platform: "CocoaPods Infrastructure"
      exploitation_status: "supply_chain_risk"
      confidence: MEDIUM
      false_positive_likelihood: MEDIUM

  # ============ Alamofire Indirect CocoaPods Risk ============

  - id: alamofire-cocoapods-supply-chain-risk
    patterns:
      - pattern: |
          pod 'Alamofire'
      - pattern-not: |
          pod 'Alamofire', :git => '$URL', :tag => '$TAG'
      - pattern-not: |
          pod 'Alamofire', '$EXACT_VERSION'
    message: |
      Alamofire dependency without version pinning (Supply Chain Risk).
      Popular iOS networking library - potential target for CocoaPods attacks.

      SUPPLY CHAIN RISK:
      Alamofire is one of the most popular iOS dependencies (50K+ apps).
      Using unpinned versions increases risk of malicious update injection
      via CocoaPods vulnerabilities (CVE-2024-38366/38367/38368).

      SECURE CONFIGURATION:
      ```ruby
      # Pin to specific version
      pod 'Alamofire', '5.8.1'

      # OR: Use Git source with tag/commit
      pod 'Alamofire',
          :git => 'https://github.com/Alamofire/Alamofire.git',
          :tag => '5.8.1'

      # OR: Use Swift Package Manager instead
      # Package.swift
      dependencies: [
          .package(url: "https://github.com/Alamofire/Alamofire.git",
                   .exact("5.8.1"))
      ]
      ```

      BEST PRACTICES:
      - Pin to exact versions
      - Review Podfile.lock in code reviews
      - Use automated dependency scanning
      - Consider migrating to Swift Package Manager

      Reference: CocoaPods Supply Chain Vulnerabilities 2024
    severity: INFO
    languages:
      - ruby
    paths:
      include:
        - "**/Podfile"
    metadata:
      category: security
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      supply_chain_risk: "high_profile_target"
      affected_library: "Alamofire"
      confidence: LOW
      false_positive_likelihood: HIGH

  # ============ SDWebImage Indirect CocoaPods Risk ============

  - id: sdwebimage-cocoapods-supply-chain-risk
    patterns:
      - pattern: |
          pod 'SDWebImage'
      - pattern-not: |
          pod 'SDWebImage', :git => '$URL', :tag => '$TAG'
      - pattern-not: |
          pod 'SDWebImage', '$EXACT_VERSION'
    message: |
      SDWebImage dependency without version pinning (Supply Chain Risk).
      Popular image loading library - potential CocoaPods attack target.

      SUPPLY CHAIN RISK:
      SDWebImage is widely used for async image downloading/caching.
      Unpinned versions risk malicious updates via CocoaPods vulnerabilities.

      SECURE CONFIGURATION:
      ```ruby
      # Pin to specific version
      pod 'SDWebImage', '5.18.7'

      # OR: Use Git source
      pod 'SDWebImage',
          :git => 'https://github.com/SDWebImage/SDWebImage.git',
          :tag => '5.18.7'
      ```

      Reference: CocoaPods Supply Chain Vulnerabilities 2024
    severity: INFO
    languages:
      - ruby
    paths:
      include:
        - "**/Podfile"
    metadata:
      category: security
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      supply_chain_risk: "high_profile_target"
      affected_library: "SDWebImage"
      confidence: LOW
      false_positive_likelihood: HIGH

  # ==================== GENERAL DEPENDENCY HYGIENE ====================

  # ============ Outdated Dependency Detection (Android) ============

  - id: outdated-android-dependency-pattern
    patterns:
      - pattern-either:
          - pattern: |
              implementation("$GROUP:$ARTIFACT:$VERSION")
          - pattern: |
              implementation '$GROUP:$ARTIFACT:$VERSION'
      - metavariable-regex:
          metavariable: $VERSION
          regex: ^(1\.|0\.).*$
      - metavariable-regex:
          metavariable: $GROUP
          regex: ^(com\.(google|squareup|github)|androidx|org\.jetbrains).*$
      - pattern-not-inside: |
          testImplementation(...)
      - pattern-not-inside: |
          androidTestImplementation(...)
    message: |
      Potentially outdated major version dependency detected.
      Dependencies with major version 0.x or 1.x may contain known vulnerabilities.

      RISK:
      Old major versions likely have unpatched security vulnerabilities.
      Popular libraries frequently release security fixes in newer versions.

      RECOMMENDATION:
      1. Check library's latest version on Maven Central
      2. Review changelog for security fixes
      3. Update to latest stable version
      4. Test thoroughly after upgrade

      AUTOMATED SCANNING:
      ```gradle
      // Use Gradle dependency updates plugin
      plugins {
          id("com.github.ben-manes.versions") version "0.51.0"
      }

      // Check for updates
      ./gradlew dependencyUpdates
      ```

      TOOLS:
      - Snyk: https://snyk.io/
      - OWASP Dependency-Check
      - GitHub Dependabot
      - Gradle Versions Plugin

      Note: Not all 0.x/1.x versions are vulnerable, but they warrant review.
    severity: INFO
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
    metadata:
      category: security
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      best_practice: "dependency_hygiene"
      confidence: LOW
      false_positive_likelihood: HIGH

  # ============ HTTP Dependency Sources (Android) ============

  - id: insecure-maven-repository-http
    patterns:
      - pattern-either:
          - pattern: |
              maven { url = uri("http://$URL") }
          - pattern: |
              maven { url 'http://$URL' }
          - pattern: |
              maven("http://$URL")
      - pattern-not: |
          maven { url = uri("http://localhost:$PORT") }
    message: |
      Insecure HTTP Maven repository detected (MITM risk).
      Dependencies downloaded over HTTP can be intercepted and tampered with.

      ATTACK SCENARIO:
      1. Developer's network traffic intercepted (public WiFi, compromised router)
      2. Attacker performs MITM attack on HTTP repository connection
      3. Malicious dependency injected during download
      4. Compromised app built and distributed

      FIX: Use HTTPS repositories only:
      ```gradle
      repositories {
          // SECURE: HTTPS
          maven { url = uri("https://jitpack.io") }
          mavenCentral()  // HTTPS by default
          google()        // HTTPS by default

          // INSECURE: HTTP (remove)
          // maven { url = uri("http://insecure.repo.com") }
      }
      ```

      GRADLE DEFAULT BEHAVIOR:
      - mavenCentral() uses HTTPS
      - google() uses HTTPS
      - Only custom maven() repositories may use HTTP

      Reference: OWASP Mobile Top 10 - M2: Inadequate Supply Chain Security
    severity: ERROR
    languages:
      - generic
    paths:
      include:
        - "**/build.gradle"
        - "**/build.gradle.kts"
        - "**/settings.gradle"
        - "**/settings.gradle.kts"
    metadata:
      category: security
      cwe: "CWE-494: Download of Code Without Integrity Check"
      owasp-mobile-2024: "M2: Inadequate Supply Chain Security"
      attack_vector: "man_in_the_middle"
      confidence: HIGH
      false_positive_likelihood: VERY_LOW
