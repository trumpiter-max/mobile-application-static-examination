rules:
  # OWASP Mobile Top 10 - M1: Improper Credential Usage
  # Enhanced with APKLeaks and TruffleHog patterns
  # Detects exposed credentials, API keys, tokens across mobile apps

  # ============ CLOUD PROVIDER CREDENTIALS ============

  - id: owasp-m1-aws-access-key-id
    patterns:
      - pattern-either:
          - pattern: $VAR = "AKIA..."
          - pattern: let $VAR = "AKIA..."
          - pattern: const $VAR = "AKIA..."
          - pattern: String $VAR = "AKIA..."
      - metavariable-regex:
          metavariable: $VAR
          regex: .*(AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}.*
    message: |
      AWS Access Key ID detected (OWASP M1: Improper Credential Usage).
      AWS access keys starting with AKIA/A3T/AGPA/AIDA/AROA/AIPA/ANPA/ANVA/ASIA
      should never be hardcoded. Use AWS Cognito, IAM roles, or secure credential management.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
      - python
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-aws-secret-key
    patterns:
      - pattern-either:
          - pattern: $VAR = "$VALUE"
          - pattern: let $VAR = "$VALUE"
          - pattern: const $VAR = "$VALUE"
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(aws[_-]?secret|secret[_-]?access[_-]?key).*
      - metavariable-regex:
          metavariable: $VALUE
          regex: ^[A-Za-z0-9/+=]{40}$
    message: |
      AWS Secret Access Key detected (OWASP M1: Improper Credential Usage).
      AWS secret keys should never be embedded in application code.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
      - python
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-google-api-key
    patterns:
      - pattern-either:
          - pattern: $VAR = "AIza..."
          - pattern: let $VAR = "AIza..."
          - pattern: const $VAR = "AIza..."
    message: |
      Google API Key detected (OWASP M1: Improper Credential Usage).
      Google API keys starting with 'AIza' should not be hardcoded.
      Use Firebase Remote Config or secure backend storage.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-google-oauth-secret
    patterns:
      - pattern-either:
          - pattern: $VAR = "$VALUE"
          - pattern: let $VAR = "$VALUE"
          - pattern: const $VAR = "$VALUE"
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(google[_-]?oauth|google[_-]?client[_-]?secret).*
      - metavariable-regex:
          metavariable: $VALUE
          regex: ^[A-Za-z0-9_-]{24}$
    message: |
      Google OAuth Client Secret detected (OWASP M1: Improper Credential Usage).
      OAuth secrets should not be in mobile apps. Use PKCE flow instead.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-firebase-url
    patterns:
      - pattern-either:
          - pattern: $VAR = "https://$SUBDOMAIN.firebaseio.com"
          - pattern: let $VAR = "https://$SUBDOMAIN.firebaseio.com"
          - pattern: URL(string: "https://$SUBDOMAIN.firebaseio.com")
    message: |
      Firebase URL detected (OWASP M1: Improper Credential Usage).
      Firebase database URLs should be configured securely with proper
      authentication and security rules, not hardcoded.
    severity: WARNING
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: MEDIUM

  # ============ COMMUNICATION PLATFORM TOKENS ============

  - id: owasp-m1-slack-token
    patterns:
      - pattern-either:
          - pattern: $VAR = "xoxb-..."
          - pattern: $VAR = "xoxp-..."
          - pattern: $VAR = "xoxa-..."
          - pattern: $VAR = "xoxr-..."
          - pattern: let $VAR = "xoxb-..."
          - pattern: let $VAR = "xoxp-..."
          - pattern: const $VAR = "xoxb-..."
          - pattern: const $VAR = "xoxp-..."
    message: |
      Slack Token detected (OWASP M1: Improper Credential Usage).
      Slack tokens (xoxb, xoxp, xoxa, xoxr) should never be hardcoded.
      Use secure backend services for Slack API integration.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
      - python
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-slack-webhook
    patterns:
      - pattern-either:
          - pattern: $VAR = "https://hooks.slack.com/services/$PATH"
          - pattern: let $VAR = "https://hooks.slack.com/services/$PATH"
          - pattern: URL(string: "https://hooks.slack.com/services/$PATH")
    message: |
      Slack Webhook URL detected (OWASP M1: Improper Credential Usage).
      Slack webhook URLs should not be hardcoded as they provide direct
      access to post messages to Slack channels.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-200: Exposure of Sensitive Information"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  # ============ PAYMENT & FINANCIAL APIs ============

  - id: owasp-m1-stripe-api-key
    patterns:
      - pattern-either:
          - pattern: $VAR = "sk_live_..."
          - pattern: $VAR = "sk_test_..."
          - pattern: let $VAR = "sk_live_..."
          - pattern: const $VAR = "sk_live_..."
    message: |
      Stripe Secret Key detected (OWASP M1: Improper Credential Usage).
      Stripe secret keys (sk_live, sk_test) should NEVER be in mobile apps.
      Use publishable keys (pk_) in apps and secret keys only on backend.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-paypal-token
    patterns:
      - pattern-either:
          - pattern: $VAR = "$VALUE"
          - pattern: let $VAR = "$VALUE"
          - pattern: const $VAR = "$VALUE"
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(paypal[_-]?token|paypal[_-]?client[_-]?secret).*
      - metavariable-regex:
          metavariable: $VALUE
          regex: ^[A-Za-z0-9_-]{20,}$
    message: |
      PayPal token/secret detected (OWASP M1: Improper Credential Usage).
      PayPal credentials should not be hardcoded in mobile applications.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: MEDIUM

  # ============ DATABASE & STORAGE SERVICES ============

  - id: owasp-m1-mongodb-connection-string
    patterns:
      - pattern-either:
          - pattern: $VAR = "mongodb://$USER:$PASS@..."
          - pattern: $VAR = "mongodb+srv://$USER:$PASS@..."
          - pattern: let $VAR = "mongodb://$USER:$PASS@..."
          - pattern: const $VAR = "mongodb://$USER:$PASS@..."
    message: |
      MongoDB connection string with credentials (OWASP M1: Improper Credential Usage).
      Database connection strings with embedded credentials should not be hardcoded.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
      - python
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-redis-password
    patterns:
      - pattern-either:
          - pattern: $VAR = "redis://:$PASS@..."
          - pattern: let $VAR = "redis://:$PASS@..."
          - pattern: const $VAR = "redis://:$PASS@..."
    message: |
      Redis connection string with password (OWASP M1: Improper Credential Usage).
      Redis passwords should not be hardcoded in source code.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  # ============ API TOKENS & AUTHENTICATION ============

  - id: owasp-m1-bearer-token
    patterns:
      - pattern-either:
          - pattern: $HEADERS.put("Authorization", "Bearer $TOKEN")
          - pattern: $HEADERS["Authorization"] = "Bearer $TOKEN"
          - pattern: setValue("Bearer $TOKEN", forHTTPHeaderField: "Authorization")
      - metavariable-regex:
          metavariable: $TOKEN
          regex: ^[A-Za-z0-9_-]{20,}$
    message: |
      Hardcoded Bearer token detected (OWASP M1: Improper Credential Usage).
      Authentication tokens should never be hardcoded. Use secure token
      management with refresh mechanisms.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-basic-auth-header
    patterns:
      - pattern-either:
          - pattern: $HEADERS.put("Authorization", "Basic $CREDS")
          - pattern: $HEADERS["Authorization"] = "Basic $CREDS"
          - pattern: setValue("Basic $CREDS", forHTTPHeaderField: "Authorization")
    message: |
      Hardcoded Basic Auth credentials (OWASP M1: Improper Credential Usage).
      Basic authentication with hardcoded credentials is highly insecure.
      Use OAuth 2.0 or other modern authentication methods.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-github-token
    patterns:
      - pattern-either:
          - pattern: $VAR = "ghp_..."
          - pattern: $VAR = "gho_..."
          - pattern: let $VAR = "ghp_..."
          - pattern: const $VAR = "ghp_..."
    message: |
      GitHub Personal Access Token detected (OWASP M1: Improper Credential Usage).
      GitHub tokens (ghp_, gho_) should never be embedded in mobile apps.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  # ============ MOBILE-SPECIFIC CREDENTIALS ============

  - id: owasp-m1-twilio-credentials
    patterns:
      - pattern-either:
          - pattern: $VAR = "AC..."
          - pattern: let $VAR = "AC..."
          - pattern: const $VAR = "AC..."
      - metavariable-regex:
          metavariable: $VAR
          regex: ^AC[a-f0-9]{32}$
    message: |
      Twilio Account SID detected (OWASP M1: Improper Credential Usage).
      Twilio credentials should not be hardcoded in mobile applications.
      Use serverless functions or backend APIs for Twilio integration.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-sendgrid-api-key
    patterns:
      - pattern-either:
          - pattern: $VAR = "SG...."
          - pattern: let $VAR = "SG...."
          - pattern: const $VAR = "SG...."
    message: |
      SendGrid API Key detected (OWASP M1: Improper Credential Usage).
      SendGrid API keys starting with 'SG.' should not be in mobile apps.
      Use backend services for email functionality.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: HIGH

  - id: owasp-m1-mailgun-api-key
    patterns:
      - pattern-either:
          - pattern: $VAR = "key-..."
          - pattern: let $VAR = "key-..."
          - pattern: const $VAR = "key-..."
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(mailgun[_-]?api[_-]?key).*
    message: |
      Mailgun API Key detected (OWASP M1: Improper Credential Usage).
      Mailgun API keys should not be embedded in mobile applications.
    severity: ERROR
    languages:
      - java
      - kotlin
      - swift
      - objc
      - javascript
      - typescript
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp-mobile-2024: "M1: Improper Credential Usage"
      confidence: MEDIUM
